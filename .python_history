import tensorrt
import numpy
numpy.core._multiarray_umath
import sys
sys.path
":".join(['', '/home/xavier3/cv_main/main', '/usr/lib/python36.zip', '/usr/lib/python3.6', '/usr/lib/python3.6/lib-dynload', '/home/xavier3/.local/lib/python3.6/site-packages', '/usr/lib/python3.6/site-packages', '/usr/local/lib/python3.6/dist-packages', '/usr/lib/python3/dist-packages', '/usr/lib/python3.6/dist-packages'])
import torch
import torchvision
torchvision
import sys
sys.path
":".join(sys.path)
import torch
import torch.nn as nn
from torch2trt import torch2trt
import torch
from torch2trt import torch2trt
from torchvision.models.alexnet import alexnet
model = alexnet(pretrained=True).eval().cuda()
import torch
from torch2trt import torch2trt
from torchvision.models.alexnet import alexnet
model = alexnet(pretrained=True).eval().cuda()
x = torch.ones((1, 3, 224, 224)).cuda()
model_trt = torch2trt(model, [x])
import torch
from torch2trt import torch2trt
from torchvision.models.alexnet import alexnet
model = alexnet(pretrained=True).eval().cuda()
x = torch.ones((1, 3, 224, 224)).cuda()
model_trt = torch2trt(model, [x])
import torch
from torch2trt import torch2trt
from torchvision.models.alexnet import alexnet
model = alexnet(pretrained=True).eval().cuda()
x = torch.ones((1, 3, 224, 224)).cuda()
model_trt = torch2trt(model, [x])
import torch
from torch2trt import torch2trt
from torchvision.models.alexnet import alexnet
model = alexnet(pretrained=True).eval().cuda()
x = torch.ones((1, 3, 224, 224)).cuda()
model_trt = torch2trt(model, [x])
from torch2trt import torch2trt
import torch
from torchvision.models.alexnet import alexnet
model = alexnet(pretrained=True).eval().cuda()
x = torch.ones((1, 3, 224, 224)).cuda()
model_trt = torch2trt(model, [x])
model_trt(
model_trt
model_trt.forward(x)
import cv
import cv2
cv2.__name__
cv2.__version__
import sys
sys.path
import cv2
import pyrealsense2
    import pyrealsense2.pyrealsense2 as rs
import pyrealsense2.pyrealsense2 as rs
import pyrealsense2 as rs
import pyrealsense2
import cv2.dnn
sys.path = ['', '/home/xavier3/cv_main/main', '/usr/lib/python36.zip', '/usr/lib/python3.6', '/home/xavier3/repos/cv_main', '/usr/local/lib/python3.6/pyrealsense2', '/home/xavier3/repos/torch2trt-fixed']
import sys
sys.path = ['', '/home/xavier3/cv_main/main', '/usr/lib/python36.zip', '/usr/lib/python3.6', '/home/xavier3/repos/cv_main', '/usr/local/lib/python3.6/pyrealsense2', '/home/xavier3/repos/torch2trt-fixed']
import cv2
import import pyrealsense2 as rs
import pyrealsense2 as rs
import subprocess
subprocess.run
suprocess.run("sudo", "chmod", "777", "/dev/ttyTHS0")
subprocess.run("sudo", "chmod", "777", "/dev/ttyTHS0")
subprocess.run(["sudo", "chmod", "777", "/dev/ttyTHS0"])
import pyzed
import subsystems.modeling.modeling_main as modeling
import tensorrt
exit()
import pytorch
import torch
model = torch.load("../best.pt")
exit()
import torch
model = torch.load('best.pt')
model = torch.hub.load('ultralytics/yolov5', 'custom', path='\best.pt')
model = torch.hub.load('ultralytics/yolov5', 'custom', path='best.pt')
exit()
import numpy
numpy. __version__ 
exit()
import torch
torch.__version__
exit()
import numpy
exit()
import numpy
model = torch.hub.load('ultralytics/yolov5', 'yolov5s')
import torch
model = torch.hub.load('ultralytics/yolov5', 'yolov5s')
exit()
import numpy
numpy.__version__
exit()
import numpy
exit()
import numpy
import torch
model = torch.hub.load('ultralytics/yolov5', 'yolov5s')
exit()
import numpy
import torch
model = torch.hub.load('ultralytics/yolov5', 'custom', path='best.pt')
exit()
import numpy # Dont delete - uses our numpy version isntead of torch's
from torch2trt import torch2trt
import torch
from torchvision.models.alexnet import alexnet
model = torch.hub.load('ultralytics/yolov5', 'custom', path='model/best.pt')
exit()
import numpy
import torch
model = torch.hub.load('ultralytics/yolov5', 'custom', path='model/best.pt')
from torch2trt import torch2trt
model_trt = torch2trt(model, [x])
exit()
import torch
torch.cuda.is_available()
exit()
from ctypes import *
class Message(Structure):
    _fields_ = [
        ("magic_number", c_longlong),
        ("horizontal_angle", c_float),
        ("vertical_angle", c_float),
        ("should_shoot", c_int),
    ]
0xdeadbeef
0xdeadbeeffff
0xdeadbeefdeadbeef
0xdeadbeefdeadbef
Message(0xdeadbeefdeadbef, 0.0, 0.0, 0)
m = Message(0xdeadbeefdeadbef, 0.0, 0.0, 0)
help(m)
from ctypes import *
magic_number = 0xdeadbeefdeadbef # used too coordinate with embedded
class Message(Structure):
    _fields_ = [
        ("magic_number", c_longlong), # 1002855686552083439
        ("horizontal_angle", c_float),
        ("vertical_angle", c_float),
        ("should_shoot", c_int),
    ]
m = Message(0xdeadbeefdeadbef, 0.0, 0.0, 0)
help(m)
from ctypes import *
magic_number = 0xdeadbeefdeadbef # used too coordinate with embedded
class Message(Structure):
    _fields_ = [
        ("magic_number", c_longlong), # 1002855686552083439
        ("horizontal_angle", c_float),
        ("vertical_angle", c_float),
        ("should_shoot", c_int),
    ]
m = Message(0xdeadbeefdeadbef, 0.0, 0.0, 0)
help(m)
import _frozen_importlib_external as _bootstrap_external
_bootstrap_external
_bootstrap_external.__file__
_w_long = _bootstrap_external._w_long
_bootstrap_external
dir(_bootstrap_external)
from ctypes import *
magic_number = 0xdeadbeefdeadbef # used too coordinate with embedded
class Message(Structure):
    _fields_ = [
        ("magic_number", c_longlong), # 1002855686552083439
        ("horizontal_angle", c_float),
        ("vertical_angle", c_float),
        ("should_shoot", c_int),
    ]
m = Message(0xdeadbeefdeadbef, 0.0, 0.0, 0)
help(m)
from ctypes import *
magic_number = 0xdeadbeefdeadbef # used too coordinate with embedded
class Message(Structure):
    _fields_ = [
        ("magic_number", c_longlong), # 1002855686552083439
        ("horizontal_angle", c_float),
        ("vertical_angle", c_float),
        ("should_shoot", c_int),
    ]
m = Message(0xdeadbeefdeadbef, 0.0, 0.0, 0)
help(m)
from ctypes import *
magic_number = 0xdeadbeefdeadbef # used too coordinate with embedded
class Message(Structure):
    _fields_ = [
        ("magic_number", c_longlong), # 1002855686552083439
        ("horizontal_angle", c_float),
        ("vertical_angle", c_float),
        ("should_shoot", c_int),
    ]
m = Message(0xdeadbeefdeadbef, 0.0, 0.0, 0)
help(m)
import sys
sys.path
import sys
sys.path
from ctypes import *
magic_number = 0xdeadbeefdeadbef # used too coordinate with embedded
class Message(Structure):
    _fields_ = [
        ("magic_number", c_longlong), # 1002855686552083439
        ("horizontal_angle", c_float),
        ("vertical_angle", c_float),
        ("should_shoot", c_int),
    ]
m = Message(0xdeadbeefdeadbef, 0.0, 0.0, 0)
help(m)
bytes(m)
import ez_yaml
a = ez_yaml.to_object(string="0xdeadbeefdeadbef")
a
m.horizontal_angle = 0.0442241
bytes(m)
import subsystems
dir(subsystems)
subsystems.__package__
from subsystems import aim
from subsystems.aim import * 
import subsystems.model        as model
import pyzed.sl as zed
zed.UNIT
import pyzed.sl as zed
zed.__package__
zed.__doc__
help(zed)
import pyzed
exit()
import torch
import torchvision
exit()
import torchvision
torchvision.__version__
exit()
import torch
torch.cuda.is_available()
import torchvision
import torch
torch.__version__
exit()
import torchvision
exit()
