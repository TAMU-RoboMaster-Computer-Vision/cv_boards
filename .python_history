import tensorrt
import numpy
numpy.core._multiarray_umath
import sys
sys.path
":".join(['', '/home/xavier3/cv_main/main', '/usr/lib/python36.zip', '/usr/lib/python3.6', '/usr/lib/python3.6/lib-dynload', '/home/xavier3/.local/lib/python3.6/site-packages', '/usr/lib/python3.6/site-packages', '/usr/local/lib/python3.6/dist-packages', '/usr/lib/python3/dist-packages', '/usr/lib/python3.6/dist-packages'])
import torch
import torchvision
torchvision
import sys
sys.path
":".join(sys.path)
import torch
import torch.nn as nn
from torch2trt import torch2trt
import torch
from torch2trt import torch2trt
from torchvision.models.alexnet import alexnet
model = alexnet(pretrained=True).eval().cuda()
import torch
from torch2trt import torch2trt
from torchvision.models.alexnet import alexnet
model = alexnet(pretrained=True).eval().cuda()
x = torch.ones((1, 3, 224, 224)).cuda()
model_trt = torch2trt(model, [x])
import torch
from torch2trt import torch2trt
from torchvision.models.alexnet import alexnet
model = alexnet(pretrained=True).eval().cuda()
x = torch.ones((1, 3, 224, 224)).cuda()
model_trt = torch2trt(model, [x])
import torch
from torch2trt import torch2trt
from torchvision.models.alexnet import alexnet
model = alexnet(pretrained=True).eval().cuda()
x = torch.ones((1, 3, 224, 224)).cuda()
model_trt = torch2trt(model, [x])
import torch
from torch2trt import torch2trt
from torchvision.models.alexnet import alexnet
model = alexnet(pretrained=True).eval().cuda()
x = torch.ones((1, 3, 224, 224)).cuda()
model_trt = torch2trt(model, [x])
from torch2trt import torch2trt
import torch
from torchvision.models.alexnet import alexnet
model = alexnet(pretrained=True).eval().cuda()
x = torch.ones((1, 3, 224, 224)).cuda()
model_trt = torch2trt(model, [x])
model_trt(
model_trt
model_trt.forward(x)
